; A276771: a(n) is the number of runs of an algorithm. Set b_0 = n, if prime or 1 or 0, stop; else, set c_0 = largest divisor of n (!=n); set b_1 = c_0 - b_0/c_0. Run with b_1.
; 0,0,0,1,0,1,0,1,1,1,0,2,0,1,1,2,0,1,0,2,2,2,0,2,1,1,2,3,0,1,0,2,2,2,1,3,0,1,2,2,0,1,0,3,3,3,0,3,1,1,2,3,0,2,2,2,3,3,0,4,0,1,2,2,2,1,0,3,3,3,0,3,0,2,3,4,2,1,0,2,3,3,0,3,3,1,2,2,0,1,2,4,4,4,2,4,0,1,2,4,0,2,0,2,3,3,0,4,0,1,3,3,0,3,2,3,4,4,2,4,1,1,2,5,3,1,0,2,3,3,0,3,3,3,2,2,0,1,0,4,4,4,1,4,3,1,4,4,0,1,0,3,4,4,2,5,0,3,2,2,3,1,0,3,4,4,0,4,1,1,3,4,0,4,2,2,3,3,0,3,0,1,4,2,3,3,2,5,5,5,0,5,0,3,2,5,0,1,0,2,3,3,3,5,4,1,2,3,2,1,0,3,4,4,2,4,3,1,4,5,2,1,0,2,4,4,0,4,0,1,3,4,0,3,2,4,5,5,0,5,0,3,2,5,4,2,2,2,3,3

lpb $0
  mov $2,$0
  max $2,0
  cal $2,20639 ; Lpf(n): least prime dividing n (when n > 1); a(1) = 1. Or, smallest prime factor of n, or smallest prime divisor of n.
  div $0,$2
  sub $0,$2
  add $1,1
lpe
