; Ackermann function
;
; input:
;   $0 = i
;   $1 = n
;
; output:
;   $2 = A(i,n)
;
; temporary variables:
;   $3 = i+1
;   $4 = j
;   $5 = k
;   $6 = stop
;   $7..$(7+i) = diff (array)
;   $(8+i)..$(9+2i) = next (array)

; set arguments
mov $0,3      ; i = 3
mov $1,3      ; n = 3

; initialize i+1 variable
mov $3,$0     ; $3 = i
add $3,1      ; $3 = i+1

; initialize diff and next arrays
mov $4,$3     ; j = i+1
lpb $4,1      ; for j = i+1..1 do
  add $4,6    ;
  mov $$4,1   ;   diff[j] = 1
  add $4,$0   ;
  add $4,1    ;
  mov $$4,0   ;   next[j] = 0
  sub $4,$0   ;
  sub $4,8    ;   j--
lpe           ; end for
add $7,$1     ; diff[0] = n+1

; main loop
lpb $7,$3     ; begin of descent loop over diff array

  ; update A
  mov $4,8
  add $4,$0
  add $4,$0
  mov $2,$$4
  add $2,1    ; A = next[i]+1

  mov $4,$3   ; j = i+1
  lpb $4,1    ; for j = i+1..1 do

    add $4,6  ;
    
    mov $5,$$4 ; k = diff[j]
    mov $6,$$4 ; stop = diff[j]
    sub $6,1   ; stop = diff[j]-1
    sub $5,$6
    mov $6,1   ; stop = 1
    lpb $5,1   ; if k > 0
      
      mov $$4,$2 ; diff[j] = A
      mov $6,$4
      add $6,$0  ;
      add $6,1   ;
      sub $$4,$$6 ; diff[j] = A - next[j]

      mov $6,0   ; stop = 0
      
      sub $5,1
    lpe
    
    sub $$4,1 ;   diff[j]--
    add $4,$0 ;
    add $4,1  ;
    add $$4,1 ;   next[j]++
    sub $4,$0 ;
    sub $4,8  ;   j--
    
    lpb $5,1  ; if stop = 1
      mov $4,0 ; j = 0
      sub $6,1 ; stop--
    lpe       ; end if

  lpe         ; end for

lpe           ; end of descent loop over diff array
