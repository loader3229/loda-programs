; Ackermann function
;
; input:
;   $0 = i
;   $1 = n
;
; output:
;   $2 = A(i,n)
;
; temporary variables:
;   $3 = i+1
;   $4 = j
;   $5 = k
;   $6 = s
;   $7 = t
;   $8 = a
;   $9..$(9+i) = diff (array)
;   $(10+i)..$(11+2i) = next (array)

; set arguments
mov $0,3      ; i = 3
mov $1,3      ; n = 3

; initialize i+1 variable
mov $3,$0     ; $3 = i
add $3,1      ; $3 = i+1

; initialize diff and next arrays
mov $4,$3     ; j = i+1
lpb $4,1      ; for j = i+1..1 do
  mov $8,8    ;
  add $8,$4   ;
  mov $$8,1   ;   diff[j] = 1
  add $8,$0   ;
  add $8,1    ;
  mov $$8,0   ;   next[j] = 0
  sub $4,1    ;   j--
lpe           ; end for
add $9,$1     ; diff[0] = n+1

; main loop
lpb $9,$3     ; begin of descent loop over diff array

  dbg

  ; update A
  mov $8,10
  add $8,$0
  add $8,$0
  mov $2,$$8
  add $2,1    ; A = next[i]+1

  mov $4,$3   ; j = i+1
  lpb $4,1    ; for j = i+1..1 do

    mov $8,8  ;
    add $8,$4 ;

    ; compute s and t flags
    mov $5,$$8 ; k = diff[j]
    mov $6,0   ; s = 0
    mov $7,1   ; t = 1
    lpb $5,1   ; if k > 0
      mov $6,1   ; s = 1
      mov $7,0   ; t = 0
      sub $5,1
    lpe
 
    lpb $7,1      ; if t = 1
      mov $$8,$2  ; diff[j] = A
      mov $6,$8
      add $6,$0   ;
      add $6,1    ;
      sub $$8,$$6 ; diff[j] = A - next[j]
      sub $7,1    ; t--
    lpe           ; end if
 
    ; dec diff and inc next
    sub $$8,1 ;   diff[j]--
    add $8,$0 ;
    add $8,1  ;
    add $$8,1 ;   next[j]++
    sub $4,1  ;   j--

    ; check s flag
    lpb $6,1  ; if s = 1
      mov $4,0 ; j = 0
      sub $6,1 ; s--
    lpe       ; end if

  lpe         ; end for

lpe           ; end of descent loop over diff array
